<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.5"?>
<plugin>

   <extension-point id="templateRootPathProviders"
					name="%templateRootPathProviders.name"
					schema="schema/templateRootPathProviders.exsd" />
   <extension-point id="dataModelProviders"
					name="%dataModelProviders.name"
					schema="schema/dataModelProviders.exsd" />
   <extension-point id="resolvedJavaTypeFactories"
					name="%resolvedJavaTypeFactories.name"
					schema="schema/resolvedJavaTypeFactories.exsd" />

   <!-- Delegate command handler for Qute template -->
   <extension point="org.eclipse.jdt.ls.core.delegateCommandHandler">
      <delegateCommandHandler class="com.redhat.qute.jdt.internal.ls.QuteSupportForTemplateDelegateCommandHandler">
            <command id="qute/template/projects"/>
            <command id="qute/template/project"/>
            <command id="qute/template/projectDataModel"/>
            <command id="qute/template/userTags"/>
            <command id="qute/template/javaTypes"/>
            <command id="qute/template/resolvedJavaType"/>
            <command id="qute/template/javaDefinition"/>
            <command id="qute/template/javadoc"/>
            <command id="qute/template/generateMissingJavaMember"/>
            <command id="qute/template/isInTemplate"/>
       </delegateCommandHandler>
   </extension>

   <!-- Delegate command handler for Java files-->
   <extension point="org.eclipse.jdt.ls.core.delegateCommandHandler">
      <delegateCommandHandler class="com.redhat.qute.jdt.internal.ls.QuteSupportForJavaDelegateCommandHandler">
            <command id="qute/java/codeLens"/>
            <command id="qute/java/diagnostics"/>
            <command id="qute/java/documentLink"/>
       </delegateCommandHandler>
   </extension>

   <!-- =========== Qute core & Quarkus Integration =========== -->
   
   <!-- Template root path providers for Qute core (src/main/resources/templates) -->
   <extension point="com.redhat.qute.jdt.templateRootPathProviders">
      <provider class="com.redhat.qute.jdt.template.rootpath.DefaultTemplateRootPathProvider" />
   </extension>

   <!-- Data model providers for Qute core -->
   <extension point="com.redhat.qute.jdt.dataModelProviders">
      <provider class="com.redhat.qute.jdt.internal.template.datamodel.TemplateFieldSupport" />
   	  <provider class="com.redhat.qute.jdt.internal.template.datamodel.CheckedTemplateSupport" />
      <provider class="com.redhat.qute.jdt.internal.template.datamodel.TemplateRecordsSupport" />
      <provider class="com.redhat.qute.jdt.internal.template.datamodel.TemplateExtensionAnnotationSupport" />
      <provider class="com.redhat.qute.jdt.internal.template.datamodel.TemplateDataAnnotationSupport" />
      <provider class="com.redhat.qute.jdt.internal.template.datamodel.TemplateEnumAnnotationSupport" />
      <provider namespaces="global,"
                description="Global Variables."
                url="https://quarkus.io/guides/qute-reference#global_variables"
                class="com.redhat.qute.jdt.internal.template.datamodel.TemplateGlobalAnnotationSupport" />
      <provider class="com.redhat.qute.jdt.internal.template.datamodel.TypeSafeMessageBundlesSupport" />
   </extension>

   <!-- Data model providers for Quarkus integration for Qute -->
   <extension point="com.redhat.qute.jdt.dataModelProviders">
      <provider namespaces="inject,cdi"
                description="A CDI bean annotated with `@Named` can be referenced in any template through `cdi` and/or `inject` namespaces."
                url="https://quarkus.io/guides/qute-reference#injecting-beans-directly-in-templates"
                class="com.redhat.qute.jdt.internal.extensions.quarkus.InjectNamespaceResolverSupport" />
   </extension>

   <!-- =========== Renarde extension =========== -->

   <!-- Data model providers for Quarkus Renarde -->
   <extension point="com.redhat.qute.jdt.dataModelProviders">
      <provider namespaces="uri,uriabs"
                description="In order to generate the URI to an endpoint, in a Qute view, you can use the `uri` and `uriabs` namespace with a call to the endpoint you want to point to."
                url="https://github.com/quarkiverse/quarkus-renarde/blob/main/docs/modules/ROOT/pages/index.adoc#obtaining-a-uri-in-qute-views"
                class="com.redhat.qute.jdt.internal.extensions.renarde.UriNamespaceResolverSupport" />
   </extension>

   <!-- Resolved Java Type Factories for Quarkus Renarde -->
   <extension point="com.redhat.qute.jdt.resolvedJavaTypeFactories">
      <factory class="com.redhat.qute.jdt.internal.extensions.renarde.RenardeResolvedJavaTypeFactory" />
   </extension>

   <!-- =========== Roq extension =========== -->
   
   <extension point="com.redhat.qute.jdt.dataModelProviders">
      <provider class="com.redhat.qute.jdt.internal.extensions.roq.RoqDataModelProvider" />
      <provider class="com.redhat.qute.jdt.internal.extensions.roq.DataMappingSupport" />
   </extension>
   
   <!-- Template root path providers for Roq (content, etc) -->
   <extension point="com.redhat.qute.jdt.templateRootPathProviders">
      <provider class="com.redhat.qute.jdt.internal.extensions.roq.RoqTemplateRootPathProvider" />
   </extension>
   
   <!-- =========== Web Bundler extension =========== -->
   
   <!-- Template root path providers for Web Bundler (src/main/resources/web/templates/) -->
   <extension point="com.redhat.qute.jdt.templateRootPathProviders">
      <provider class="com.redhat.qute.jdt.internal.extensions.webbundler.WebBundlerTemplateRootPathProvider" />
   </extension>   
   
</plugin>